#!/bin/sh

# Runs detailed style checking when pushing results.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

IFS=' '
while read local_ref local_sha remote_ref remote_sha
do
	if [ "$local_sha" = $z40 ]
	then
		# Handle delete
		:
	else
	    if [ "$remote_sha" = $z40 ]
	    then
		# New branch
		if [ $(git branch -r --contains "$local_sha" | grep -c 'origin' ) -gt 0 ]
		then
		    # This was a push of a commit that already existed in the
		    # remote, so we don't need to do anything
		    continue
		else
		    # Need to handle the case where the commit brings new
		    # files with it
		    new_commits=$(git log --oneline origin.."$local_sha" | grep -o ^[^[:space:]]*)
		    last_new_commit=$(echo "$new_commits" | tail -n 1)
		    # Get the files that are different between the local
		    # commit and the parent of the earliest commit (ish) not
		    # in the remote
		    FILES=$(git diff --name-only "$local_sha" "$last_new_commit"^)
		fi
	    else
		FILES=$(git diff --name-only "$local_sha" "$remote_sha")
	    fi
	fi
done
./utils/hooks/check_pep8.sh $FILES || exit -1

exit 0
